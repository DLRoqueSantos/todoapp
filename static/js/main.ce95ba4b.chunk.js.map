{"version":3,"sources":["index.js"],"names":["ListContain","props","react__WEBPACK_IMPORTED_MODULE_8___default","a","createElement","type","onChange","style","textDecoration","todo","complete","cat","desc","onClick","deleteTask","className","TodoForm","state","id","handleChange","event","console","log","_this","setState","Object","C_Users_Diogo_Desktop_todo_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_2__","target","name","value","handleSubmit","preventDefault","onSubmit","this","placeholder","for","React","Component","TodoList","todos","addTodo","_this2","concat","C_Users_Diogo_Desktop_todo_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__","toogleComplete","map","C_Users_Diogo_Desktop_todo_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","filter","tasks","_this3","key","CompleteMessage","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ce95ba4b.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n//function to add return the list elements back to the <ul>\n//props are passed out using props\nfunction ListContain(props) {\n  return (\n    <li>\n      <input type=\"checkbox\" \n      onChange={props.onChange}\n      />\n      <label style={{ textDecoration:  props.todo.complete ? \"line-through\" : \"\"}}>{props.todo.cat}</label>\n      <label style={{ textDecoration:  props.todo.complete ? \"line-through\" : \"\"}}>{props.todo.desc}</label>\n      <button onClick={props.deleteTask} className=\"delete\">Delete</button>\n    </li>\n  );\n}\n\nclass TodoForm extends React.Component {\n  state = {\n    id: 11, //id starts at 11 because there is already 10 other tasks defined below\n    cat: \"\",\n    desc: \"\"\n  }\n\n//everytime user types it automaticaly changes the state of either cat/desc to the input value\nhandleChange = (event) => {\n  console.log(event);\n  this.setState({\n    [event.target.name]: event.target.value\n  })\n}\n\n//submit form function\nhandleSubmit = (event) =>{\n  event.preventDefault();\n  if(this.state.cat){\n  this.setState({id: this.state.id+1}) //add 1 to the last id\n  //submit form with the defined in the state previously by the handleChange\n  this.props.onSubmit({\n    id: this.state.id,\n    cat: this.state.cat,\n    desc: this.state.desc,\n    complete: false\n  });\n\n  //on submit clear the inputs values\n  this.setState({\n    cat: \"\",\n    desc: \"\"\n  });\n  }\n}\n//display the form elements\n  render(){\n    return (\n    <form onSubmit={this.handleSubmit}>\n    <div className=\"Input\">\n      <input\n      id=\"inputCat\"\n      className=\"Input-text\" \n      name=\"cat\" \n      value={this.state.cat} \n      onChange={this.handleChange}\n      placeholder=\"Task Category\"/>\n      <label for=\"inputCat\" className=\"Input-label\">Category</label>\n    </div>\n\n    <div className=\"Input\">  \n      <input\n      id=\"inputDesc\"\n      className=\"Input-text\"\n      name=\"desc\" \n      value={this.state.desc} \n      onChange={this.handleChange}\n      placeholder=\"Task Description\"/>\n      <label for=\"inputDesc\" className=\"Input-label\">Description</label>\n    </div>\n    <button onClick={this.handleSubmit}>Add</button>\n  </form>\n    );\n  } \n}\n\n//Main todo class TodoList\nclass TodoList extends React.Component {\n  //hard coded tasks inside the main todos state\n  state = {\n    todos: [\n      {id: 0, cat: \"Web\", desc: \"Study for the Quiz\", complete: false},\n      {id: 1, cat: \"Portfolio\", desc: \"Perfect personal logo\", complete: false},\n      {id: 2, cat: \"Portfolio\", desc: \"Hard code personal portfolio using React\", complete: false},\n      {id: 3, cat: \"Portfolio\", desc: \"Select best portfolio pieces\", complete: false},\n      {id: 4, cat: \"Resume\", desc: \"Update Resume\", complete: false},\n      {id: 5, cat: \"Project Management\", desc: \"Study for Quiz on Friday\", complete: false},\n      {id: 6, cat: \"Carrer Planning\", desc: \"Create a quotation, cover letter, pitch for building Website\", complete: false},\n      {id: 7, cat: \"NextGenDinner\", desc: \"Pick date for interview\", complete: false},\n      {id: 8, cat: \"Website\", desc: \"Have website ready to present in NGD interview\", complete: false},\n      {id: 9, cat: \"Internship\", desc: \"Jam3, find more companies like them\", complete: false},\n      {id: 10, cat: \"UX Class\", desc: \"Read Netflix case study and come with a discussion question\", complete: false}\n    ]\n  };\n\n  //add a todo function - add the new task + copies all the already defined tasks\n  addTodo = (todo) => {\n    this.setState({\n      todos: [todo, ...this.state.todos]\n    });\n  };\n  \n  //when task toogled as complete change the complete state to true if the id matches \n  toogleComplete = id =>{\n    this.setState({\n      todos: this.state.todos.map(todo =>{\n        console.log(todo.id);\n        /* Update tasks complete status. If the clicked id matches the row \n        change the complete state to inverse, but keep the other states the same*/\n        if (todo.id === id){\n          return{\n            ...todo,\n            complete: !todo.complete\n          };\n        }else{\n          return todo;\n        }\n      })\n    });\n  };\n\n  //delete task by creating a new array with all tasks that don't match the targeted id\n  deleteTask = id =>{\n    console.log(\"delete this\" + id);\n    this.setState({\n      todos: this.state.todos.filter(todo => todo.id !== id)\n    })\n  };\n\n  //function to verify tasks with state complete to send back a message\n  CompleteMessage(tasks){\n    if(tasks <= 0){\n      return \"All tasks are completed. Good Job!\";\n    }else{\n      return `Tasks Remaining: ${tasks}`;\n    }\n  }\n\n  //display the main div + Form component + List of todos component\n  render(){\n    return (\n    <div>\n      <h1 className=\"title\">To-Do List</h1>\n      <TodoForm onSubmit={this.addTodo} />\n      <div className=\"wrapper\">\n      <ul className=\"task-row\">\n        {this.state.todos.map(todo => (\n          <ListContain //props sent to the component\n            key={todo.id} \n            onChange={() => this.toogleComplete(todo.id)}\n            deleteTask={() => this.deleteTask(todo.id)}\n            todo={todo} />\n        ))}\n      </ul>\n      </div>\n      <h3>{this.CompleteMessage(this.state.todos.filter(todo => !todo.complete).length)}</h3>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<TodoList />, document.getElementById(\"root\"));"],"sourceRoot":""}